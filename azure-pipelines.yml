# Builds emuflight Configurator on Windows, Linux and OSX platforms.
#
# After building, artifacts are NOT released to a seperate repository.
#
# Azure Pipelines requires the following extensions to be installed:
# - GitHub Tool: https://marketplace.visualstudio.com/items?itemName=marcelo-formentao.github-tools
#
# You'll also need to setup the follwing pipeline variables:
#     "releaseNotes" - This is used to add the release notes in the windows job in the build stage so they can be published as part of the github release in the release stage
#     "endpoint" - The name of the github endpoint link setup in AzDo - setup when linking AzDo and GitHub
#     "owner" - The owner of the repository to release to e.g. nerdCopter
#     "repoName" - The name of the repository to release to e.g. EmuConfigurator_nerdRepo

variables:
  endpoint: nerdCopter
  owner: nerdCopter
  repoName: EmuConfigurator_nerdRepo
  releaseNotes: |+
    * not intended for public consumption.
    * this is test of the Microsoft Azure Pipelines build system
    * may contain bugs / incomplete features.
    * do not use unless directed to do so.

name: $(Date:yyyyMMdd).$(BuildID)
trigger:
  batch: true
  branches:
    include:
    - master
pr: none

stages:
- stage: Build
  jobs:

  - job: 'Windows'
    pool:
      vmImage: 'vs2017-win2016'

    steps:
    - task: UseNode@1
      inputs:
        version: '10.16.3'
      displayName: 'Install Node.js 10.16.3'
    - script: yarn install
      displayName: 'Run yarn install'
    - script: yarn gulp release --win32 --win64
      displayName: 'Run yarn release for win32/64'
      condition: succeeded()
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Windows release'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/release'
        artifact: 'emuflight-configurator-windows'

  - job: 'MacOS'
    pool:
      vmImage: 'macOS-latest'

    steps:
    - task: UseNode@1
      inputs:
        version: '10.16.3'
      displayName: 'Install Node.js 10.16.3'
    - script: npm install -g gulp
      displayName: 'Install Gulp'
    - script: yarn install
      displayName: 'Run yarn install'
    - script: yarn gulp release --osx64
      displayName: 'Run yarn release for OSX64'
      condition: succeeded()
    - task: PublishPipelineArtifact@1
      displayName: 'Publish MacOS release'
      inputs:
          artifactName: emuflight-configurator-macos
          targetPath: '$(System.DefaultWorkingDirectory)/release'

  - job: 'Linux'
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - task: UseNode@1
      inputs:
        version: '10.16.3'
      displayName: 'Install Node.js 10.16.3'
    - script: yarn install
      displayName: 'Run yarn install'
    - script: yarn gulp release --linux64
      displayName: 'Run yarn release for linux64'
      condition: succeeded()
    - script: cd $(System.DefaultWorkingDirectory)/release; find -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;
      displayName: 'Clean release folders'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux release'
      inputs:
        artifactName: emuflight-configurator-linux
        targetPath: '$(System.DefaultWorkingDirectory)/release'


- stage: GitHubDraftRelease
  jobs:
  - job: GitHubDraftRelease

    steps:
    - task: DownloadPipelineArtifact@2
    - powershell: Write-Output ("##vso[task.setvariable variable=releaseNotes;]$(releaseNotes)")
      condition: succeeded()
    - task: GitHubReleasePublish@1
      inputs:
        githubEndpoint: '$(endpoint)'
        manuallySetRepository: true
        githubOwner: '$(owner)'
        githubRepositoryName: '$(repoName)'
        #githubTag: $(Date:yyyyMMdd).$(BuildID) #defaults to $(name) and this usually fails variables anyway
        githubReleaseTitle: '$(Build.Repository.Name): $(Build.SourceBranchName) ($(Build.BuildNumber))'
        githubReleaseDraft: true              #this will allow hiding until manually unsetting 'draft'
        githubReleasePrerelease: true         #make it a pre-release, we can manually unset also if appropriate
        githubIgnoreAssets: false
        githubReleaseAsset: |
          $(Pipeline.Workspace)/emuflight-configurator-windows/**
          $(Pipeline.Workspace)/emuflight-configurator-macos/**
          $(Pipeline.Workspace)/emuflight-configurator-linux/**
        githubReuseRelease: false
        githubReuseDraftOnly: false
        githubSkipDuplicatedAssets: false
        githubEditRelease: true
        githubDeleteEmptyTag: false
        githubReleaseNotes: |+
          $(releaseNotes)

          #### Repository:
          $(Build.Repository.Name) ([link]($(Build.Repository.Uri)))

          #### Branch:
          $(Build.SourceBranchName) ([link]($(Build.Repository.Uri)/tree/$(Build.SourceBranchName)))

          #### Commit SHA:
          $(Build.SourceVersion) ([link]($(Build.Repository.Uri)/commit/$(Build.SourceVersion)))

          #### Commit Message:
          $(Build.SourceVersionMessage)

          #### Azure Pipelines Debug:
          Build.SourceBranchName: $(Build.SourceBranchName)
          Build.Repository.Name: $(Build.Repository.Name)
          Build.Repository.ID: $(Build.Repository.ID)
          Build.Repository.Uri: $(Build.Repository.Uri)
          Build.RequestedFor: $(Build.RequestedFor)
          Build.QueuedBy: $(Build.QueuedBy)
          Build.Reason: $(Build.Reason)
          Build.BuildId: $(Build.BuildId)
          Build.BuildNumber: $(Build.BuildNumber)
#- stage: BintrayUpload
#  jobs:
#  - job: BintrayCURL
#    steps:
#    - task: DownloadPipelineArtifact@2
#    - powershell: "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12"
#    - task: cURLUploader@2
#      inputs:
#        files: '$(Pipeline.Workspace)/emuflight-configurator**/**'
#        serviceEndpoint: 'BinTray-Dev'
#        remotePath: 'nerdCopter_fork/./;bt_package=$(Build.SourceBranchName);bt_version=$(Build.BuildNumber);publish=1'
#        redirectStderr: true
#- stage: PublishArtifacts
#  jobs:
#  - job: PublishArtifacts
#    steps:
#    - task: DownloadPipelineArtifact@2
#      condition: succeeded()
#    - task: PublishPipelineArtifact@1
#      inputs:
#        targetPath: '$(Pipeline.Workspace)/emuflight-configurator**/**'
#        artifact: 'EmuConfigurator'
#        publishLocation: 'pipeline'
